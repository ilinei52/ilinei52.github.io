<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Wed, 24 Nov 2021 09:04:17 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Рекурсивное алгоритм умножения Карацубы]]></title>
            <guid>6510bd01ede34381b0636169f618af42</guid>
            <pubDate>Tue, 23 Nov 2021 15:26:30 GMT</pubDate>
            <content:encoded><![CDATA[<div><pre class="hljs"><code><span class="hljs-attr">Xb</span> = <span class="hljs-number">5678</span>; <span class="hljs-attr">Yb</span> = <span class="hljs-number">1234</span>; <span class="hljs-attr">n</span> = <span class="hljs-number">4</span>; <span class="hljs-attr">a</span> = <span class="hljs-number">56</span>; <span class="hljs-attr">b</span> = <span class="hljs-number">78</span>; <span class="hljs-attr">c</span> = <span class="hljs-number">12</span>; <span class="hljs-attr">d</span> = <span class="hljs-number">34</span>;

// Числа можно выразить в следующем виде
<span class="hljs-attr">Xc</span> = <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * a + b
<span class="hljs-attr">Yb</span> = <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * c + d

// Тперь получим их произведения
 <span class="hljs-attr">step1</span> = (<span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * a + b) * (<span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * c + d)
 <span class="hljs-attr">step2</span> = <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * a * (<span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * c + d) + b * (<span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * c + d)
 <span class="hljs-attr">step3</span> = <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * a * <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * c + <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * a * d + b * <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * c + b * d
 <span class="hljs-attr">step4</span> = <span class="hljs-number">10</span>^n * a * c + <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * a * d + b * <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * c + b * d

<span class="hljs-attr">ac</span> = a*c
<span class="hljs-attr">ad</span> = a*d
<span class="hljs-attr">bc</span> = b*c
<span class="hljs-attr">bd</span> = b*d

<span class="hljs-attr">step4</span> = <span class="hljs-number">10</span>^n * ac + <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * ad + <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * bc + bd
<span class="hljs-attr">step4</span> = <span class="hljs-number">10</span>^n * ac + <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>) * (ad + bc) + bd

Умножение Карацубы

<span class="hljs-attr">sK1</span> = a*c
<span class="hljs-attr">sK2</span> = b*d
<span class="hljs-attr">sK3</span> = (a+b)*(d+c)
<span class="hljs-attr">sK4</span> = sK3 - sK1 - sK2
<span class="hljs-attr">sK5</span> = <span class="hljs-number">10</span>^n * sK1 + <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>)*sK4 + sK2

<span class="hljs-attr">p=(a+b)</span>
<span class="hljs-attr">q=(d+c)</span>
<span class="hljs-attr">sK1</span> = a*c
<span class="hljs-attr">sK2</span> = b*d
<span class="hljs-attr">sK3</span> = p*q
<span class="hljs-attr">sK4</span> = sK3 - sK1 - sK2
<span class="hljs-attr">sK5</span> = <span class="hljs-number">10</span>^n * sK1 + <span class="hljs-number">10</span>^(n/<span class="hljs-number">2</span>)*sK4 + sK2
</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Joplin | Docs | RU | Plugin | Создание плагина оглавления]]></title>
            <guid>f75dbe0c675d49fc8330519ba053dca4</guid>
            <pubDate>Sat, 06 Nov 2021 13:36:57 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="создание-плагина-оглавления">Создание плагина оглавления</h1>
<p>Это руководство проведет вас через шаги по созданию плагина оглавления для Joplin. Рядом с текущей заметкой отобразится вид, содержащий ссылки на разделы заметки. Можно будет щелкнуть один из заголовков, чтобы перейти в соответствующий раздел.</p>
<p>Из этого руководства вы узнаете о нескольких аспектах API Joplin, включая</p>
<ul>
<li>API плагина</li>
<li>Как создать webview</li>
<li>Как отслеживать изменения в пользовательском интерфейсе</li>
</ul>
<h2 id="настройка-окружения">Настройка окружения</h2>
<p>Прежде чем продолжить, убедитесь, что ваше окружения настроена правильно, как описано в <a title="https://joplinapp.org/api/get_started/plugins/" href="https://joplinapp.org/api/get_started/plugins/">руководстве по началу работы</a>.</p>
<h2 id="получить-текущую-заметку">Получить текущую заметку</h2>
<p>Чтобы создать таблицу, вам потребуется доступ к содержимому выбранной в данный момент заметки, и вам нужно будет обновлять оглавление каждый раз, когда заметка изменяется. Все это можно сделать с помощью API рабочей области, которое предоставляет информацию об активном редактируемом контенте.</p>
<p>Итак, в обработчике события <code>onStart()</code> добавьте следующее:</p>
<div><pre class="hljs"><code>joplin.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">register</span>({
    <span class="hljs-attr">onStart</span>: <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {
        <span class="hljs-comment">// Позже здесь вы захотите обновить оглавление.</span>
        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTocView</span>(<span class="hljs-params"></span>) {
            <span class="hljs-comment">// Получите текущую заметку из рабочей области.</span>
            <span class="hljs-keyword">const</span> note = <span class="hljs-keyword">await</span> joplin.<span class="hljs-property">workspace</span>.<span class="hljs-title function_">selectedNote</span>();

            <span class="hljs-comment">// Имейте в виду, что он может иметь значение null, если в данный момент ничего не выделено!</span>
            <span class="hljs-keyword">if</span> (note) {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">'Note content has changed! New note is:'</span>, note);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">'No note is selected'</span>);
            }
        }

        <span class="hljs-comment">// Это событие будет инициировано, когда пользователь выберет другую заметку.</span>
        <span class="hljs-keyword">await</span> joplin.<span class="hljs-property">workspace</span>.<span class="hljs-title function_">onNoteSelectionChange</span>(<span class="hljs-function">() =&gt;</span> {
            <span class="hljs-title function_">updateTocView</span>();
        });

        <span class="hljs-comment">// Это событие будет инициировано, когда содержание заметки изменится так как вы также хотите обновить оглавление в этом случае.</span>
        <span class="hljs-keyword">await</span> joplin.<span class="hljs-property">workspace</span>.<span class="hljs-title function_">onNoteChange</span>(<span class="hljs-function">() =&gt;</span> {
            <span class="hljs-title function_">updateTocView</span>();
        });

        <span class="hljs-comment">// Also update the TOC when the plugin starts</span>
        <span class="hljs-title function_">updateTocView</span>();
    },

});</code></pre></div>
<p>Попробуйте описанное выше, и вы должны увидеть в консоли обработчик событий, вызываемый каждый раз при открытии новой заметки или при изменении содержимого заметки.</p>
<h3 id="получение-разделов-заметок-и-слагов">Получение разделов заметок и <mark>слагов</mark></h3>
<p>Теперь, когда у вас есть текущая заметка, вам нужно извлечь заголовки из этой заметки, чтобы построить из нее оглавление. Поскольку содержимое заметки представляет собой обычный Markdown, есть несколько способов сделать это, например, с помощью парсера Markdown, но на данный момент быстрое и грязное решение - получить все строки, начинающиеся с любого числа #, за которым следует пробел. Любая такая строка должна быть заголовком.</p>
<p>Функция ниже, которую вы можете скопировать в любом месте вашего файла, будет использовать этот метод и возвращать массив заголовков с текстом и уровнем (H1, H2 и т. Д.) Заголовка:</p>
<div><pre class="hljs"><code>function <span class="hljs-title function_">noteHeaders</span>(noteBody:string) {
    <span class="hljs-keyword">const</span> headers = [];
    <span class="hljs-keyword">const</span> lines = noteBody.<span class="hljs-property">split</span>(<span class="hljs-string">'\n'</span>);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-built_in">line</span> of lines) {
        <span class="hljs-keyword">const</span> <span class="hljs-built_in">match</span> = <span class="hljs-built_in">line</span>.<span class="hljs-property">match</span>(/^(#+)\<span class="hljs-title function_">s</span>(.*)*/);
        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">match</span>) <span class="hljs-keyword">continue</span>;
        headers.<span class="hljs-property">push</span>({
            level: <span class="hljs-built_in">match</span>[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>,
            <span class="hljs-built_in">text</span>: <span class="hljs-built_in">match</span>[<span class="hljs-number">2</span>],
        });
    }
    <span class="hljs-keyword">return</span> headers;
}</code></pre></div>
<p>Затем вызовите эту функцию из своего дескриптора события:</p>
<div><pre class="hljs"><code>joplin.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">register</span>({

    <span class="hljs-attr">onStart</span>: <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {

        <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTocView</span>(<span class="hljs-params"></span>) {
            <span class="hljs-keyword">const</span> note = <span class="hljs-keyword">await</span> joplin.<span class="hljs-property">workspace</span>.<span class="hljs-title function_">selectedNote</span>();

            <span class="hljs-keyword">if</span> (note) {
                <span class="hljs-keyword">const</span> headers = <span class="hljs-title function_">noteHeaders</span>(note.<span class="hljs-property">body</span>);
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">'The note has the following headers'</span>, headers);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">'No note is selected'</span>);
            }
        }

        <span class="hljs-comment">// ...</span>
    },

});</code></pre></div>
<p>Позже вам также понадобится способ сгенерировать ярлык для каждого заголовка. Слаг - это идентификатор, который используется для ссылки на определенный заголовок. По сути, текст заголовка, такой как «Мой заголовок», преобразуется в «мой-заголовок». И если слаг с таким именем уже существует, к нему добавляется номер. Не вдаваясь в подробности, вам понадобится пакет “slug”, чтобы сгенерировать это для вас, поэтому установите его с помощью <code>npm i -s 'git+https://github.com/laurent22/uslug.git#emoji-support'</code> из корня каталога вашего плагина (Примечание: вы также можете установить пакет «uslug» отдельно, но он не будет поддерживать эмодзи).</p>
<p>Тогда это функция, которая вам понадобится для Joplin, поэтому скопируйте ее куда-нибудь в свой файл:</p>
<div><pre class="hljs"><code><span class="hljs-keyword">const</span> uslug = <span class="hljs-built_in">require</span>(<span class="hljs-string">'uslug'</span>);

<span class="hljs-keyword">let</span> slugs = {};

<span class="hljs-keyword">function</span> <span class="hljs-title function_">headerSlug</span>(<span class="hljs-params">headerText</span>) {
    <span class="hljs-keyword">const</span> s = <span class="hljs-title function_">uslug</span>(headerText);
    <span class="hljs-keyword">let</span> num = slugs[s] ? slugs[s] : <span class="hljs-number">1</span>;
    <span class="hljs-keyword">const</span> output = [s];
    <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">1</span>) output.<span class="hljs-title function_">push</span>(num);
    slugs[s] = num + <span class="hljs-number">1</span>;
    <span class="hljs-keyword">return</span> output.<span class="hljs-title function_">join</span>(<span class="hljs-string">'-'</span>);
}</code></pre></div>
<p>И вам понадобится служебная функция, чтобы избежать HTML. Для этого существует множество пакетов, но пока вы можете просто использовать это:</p>
<div><pre class="hljs"><code><span class="hljs-regexp">//</span> From https:<span class="hljs-regexp">//</span>stackoverflow.com<span class="hljs-regexp">/a/</span><span class="hljs-number">6234804</span>/<span class="hljs-number">561309</span>
<span class="hljs-keyword">function</span> escapeHtml(unsafe:string) {
    return unsafe
        .replace(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">"&amp;amp;"</span>)
        .replace(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">"&amp;lt;"</span>)
        .replace(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">"&amp;gt;"</span>)
        .replace(<span class="hljs-regexp">/"/g</span>, <span class="hljs-string">"&amp;quot;"</span>)
        .replace(<span class="hljs-regexp">/'/g</span>, <span class="hljs-string">"&amp;#039;"</span>);
}</code></pre></div>
<p>Снова попробуйте запустить плагин, и если вы выберете заметку с несколькими заголовками, вы должны увидеть список заголовков в консоли.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Styleguide]]></title>
            <guid>48242e477ac442c8b786c038c52265e0</guid>
            <pubDate>Mon, 24 May 2021 11:35:27 GMT</pubDate>
            <content:encoded><![CDATA[<p><img src="/_resources/a88437f86c9e4dfabeac0ba796bd95d8.png" /> <img src="/_resources/53834e34e04b42d6be36fe29813936d8.png" /> <img src="/_resources/94e19cae5d2e4e13baefb53823ca88dd.png" /> <img src="/_resources/791e42f7d87b4aaab18acf1656853a08.png" /> <img src="/_resources/05a371fee0644eb9becd4026ee27590f.png" /></p>
<hr />
<h1 id="h1-heading-8-">h1 Heading 😎</h1>
<h2 id="h2-heading">h2 Heading</h2>
<h3 id="h3-heading">h3 Heading</h3>
<h4 id="h4-heading">h4 Heading</h4>
<h5 id="h5-heading">h5 Heading</h5>
<h6 id="h6-heading">h6 Heading</h6>
<hr />
<h2 id="emphasis">Emphasis</h2>
<p><strong>This is bold text</strong></p>
<p><strong>This is bold text</strong></p>
<p><em>This is italic text</em></p>
<p><em>This is italic text</em></p>
<p><s>Strikethrough</s></p>
<h2 id="blockquotes">Blockquotes</h2>
<blockquote>
<p>Blockquotes can also be nested…</p>
<blockquote>
<p>…by using additional greater-than signs right next to each other…</p>
<blockquote>
<p>…or with spaces between arrows.</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="code">Code</h2>
<p>Inline <code>code</code></p>
<p>Indented code</p>
<pre><code>// Some comments
line 1 of code
line 2 of code
line 3 of code
</code></pre>
<p>Block code “fences”</p>
<div><pre class="hljs"><code><span class="hljs-function"><span class="hljs-title">Sample</span></span> text here...</code></pre></div>
<p>Syntax highlighting</p>
<div><pre class="hljs"><code><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params">bar</span>) {
  <span class="hljs-keyword">return</span> bar++;
};

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo</span>(<span class="hljs-number">5</span>));</code></pre></div>
<h2 id="tables">Tables</h2>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td>engine</td>
<td>engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td>ext</td>
<td>extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<p>Right aligned columns</p>
<table>
<thead>
<tr>
<th style="text-align:right">Option</th>
<th style="text-align:right">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">data</td>
<td style="text-align:right">path to data files to supply the data that will be passed into templates.</td>
</tr>
<tr>
<td style="text-align:right">engine</td>
<td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td>
</tr>
<tr>
<td style="text-align:right">ext</td>
<td style="text-align:right">extension to be used for dest files.</td>
</tr>
</tbody>
</table>
<h2 id="links">Links</h2>
<p><a title="http://dev.nodeca.com" href="http://dev.nodeca.com">link text</a></p>
<p><a title="title text!" href="http://nodeca.github.io/pica/demo/">link with title</a></p>
<p>Autoconverted link <a title="https://github.com/nodeca/pica" href="https://github.com/nodeca/pica">https://github.com/nodeca/pica</a> (enable linkify to see)</p>
]]></content:encoded>
        </item>
    </channel>
</rss>